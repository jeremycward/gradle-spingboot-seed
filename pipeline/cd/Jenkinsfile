def projectName = 'contacts'
def projectDev  = projectName + '-dev'
def projectTest = projectName + '-test'
def appName = 'gradle-spingboot-seed'
def gitBranch = 'master'
def gitRepoUrl = 'https://github.com/sadhal/gradle-spingboot-seed.git'

node('maven') {
  stage('Greeting') {
    echo 'hello from pipeline'
    sh 'ls -la'
    sh 'env | sort'
  }
  stage('Checkout and build') {
    git branch: gitBranch, url: gitRepoUrl
    echo 'starting ./gradlew build'
    sh './gradlew build'
  }
  stage ('Test and Analysis') {
     parallel (
         'Test': {
             echo 'starting ./gradlew test'
             sh './gradlew test'
             step([$class: 'JUnitResultArchiver', testResults: '**/build/test-results/test/TEST-*.xml'])
         },
         'Static Analysis': {
             //sh "${mvnCmd} jacoco:report sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
             echo 'starting ./gradlew sonarqube'
             sh './gradlew sonarqube -Dsonar.host.url=http://sonarqube:9000'
         }
     )
  } /*
  stage('Test and static analysis') {
    echo 'starting ./gradlew test'
    sh './gradlew test'
  }
  stage('Static analysis') {
    echo 'starting ./gradlew sonarqube'
    sh './gradlew sonarqube -Dsonar.host.url=http://sonarqube:9000'
  } */
  stage('Build image') { 
    sh 'ls -la'
    openshiftBuild(buildConfig: appName, showBuildLogs: 'true', namespace: projectDev)
  }
  stage('Deploy DEV') {
    openshiftDeploy(deploymentConfig: appName, namespace: projectDev)
    echo 'Verifying deployment'
    openshiftVerifyDeployment(deploymentConfig: appName, namespace: projectDev)
  }
  stage('Integration tests') {
    echo 'Run HTTP-api integration tests with tools such as Cornichon'
  }
  stage('Performance tests') {
    echo 'Run perf tests with tools such as Gattling'
  }
  stage('Tag docker image') {
    openshiftTag(namespace: projectDev, sourceStream: appName, sourceTag: 'latest', destinationNamespace: projectTest, destinationStream: appName, destinationTag: 'latest')
  }
  stage('Deploy QA') {
    timeout(time:5, unit:'MINUTES') {
      input message: "Promote to STAGE?", ok: "Promote"
    }
    openshiftDeploy(deploymentConfig: appName, namespace: projectTest)
    echo 'Verifying deployment' + appName
    openshiftVerifyDeployment(deploymentConfig: appName, namespace: projectTest)
  }
}

